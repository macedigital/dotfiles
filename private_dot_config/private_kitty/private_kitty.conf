# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Session {{{

# setup initial window size
remember_window_size  yes
initial_window_width  800
initial_window_height 640

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded.
startup_session session.conf

#: }}}

#: scrolling {{{

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
scrollback_pager less +G -R

# Set environment variables preventing creation of .xsel.log and .less_history files
env LESSHISTFILE=-
env LESSSECURE=1
env XDG_CACHE_HOME="${HOME}/.cache"

# Choose whether to use the system implementation of wcwidth() (used to
# control how many cells a character is rendered in).  If you use the system
# implementation, then kitty and any programs running in it will agree. The
# problem is that system implementations often are based on outdated unicode
# standards and get the width of many characters, such as emoji, wrong. So if
# you are using kitty with programs that have their own up-to-date wcwidth()
# implementation, set this option to no.
#use_system_wcwidth yes

scrollback_lines 10000

#: }}}

#: Fonts {{{

font_family FiraCode NF
font_size 10.0

map kitty_mod+plus change_font_size all +2.0
map kitty_mod+minus change_font_size all -2.0
map kitty_mod+0 change_font_size all 0

#: }}}

#: Key map {{{

map kitty_mod+w close_window
#map kitty_mod+] next_window
#map kitty_mod+[ previous_window
map kitty_mod+f move_window_forward
map kitty_mod+b move_window_backward
map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 previous_window
map kitty_mod+9 next_window
#: }}}

#: Tab management {{{

tab_bar_style powerline
tab_powerline_style angled
tab_activity_symbol ðŸ’¿

map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
map kitty_mod+t     new_tab
map kitty_mod+q     close_tab
map kitty_mod+.     move_tab_forward
map kitty_mod+,     move_tab_backward
map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

enabled_layouts tall,stack

map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: Custom settings {{{

# Include *.conf files from all subdirs of kitty.d inside the kitty config dir
globinclude kitty.d/**/*.conf

#: }}}

#: Theme {{{

# BEGIN_KITTY_THEME
# Tango Dark
include current-theme.conf
# END_KITTY_THEME

#: }}}
